#!/bin/bash
#
# Arkeev - Sciemon Backup Management
#
# Description: Arkeev program file
#

###############################################################################
#
# Variables
#
###############################################################################

# Get program path
PROGPATH=`echo $0 | /bin/sed -e 's,[\\/][^\\/][^\\/]*$,,'` 

# Program information
PROGNAME=arkeev
PVERSION="0.004b-dev (2012-04-23)"
DESCRIPT="Sciemon Backup Management"
PRPROMPT=$PROGNAME

# Return states
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3

# Internal variables
TRUE=1
FALSE=0
DEBUG=$FALSE
IFS=","

# Jobs variables
JOB_NAME="new_job"
JOB_HOSTNAME="not_defined"
JOB_PROTO="local"
JOB_PORT="0"
JOB_SOURCE="/etc"
JOB_SUDO=$FALSE
JOB_USER="null"
JOB_PASS="null"
JOB_OUTDIR="/tmp"
JOB_COMPRESSION="bzip2"

# Files
FILE_JOBS="jobs_new.csv"
DIR_LOG="."


###############################################################################
#
# Functions
#
###############################################################################

help () {
	echo -e "$DESCRIPT.

Usage: $PROGNAME -f [FILE] -o [DIRECTORY]

Options:
  -f, --file                define jobs file
  -l, --log                 define log directory
  -i, --cli                 invoke interactive command line options
  -d, --debug               Enable debug messages
  -r, --run                 run job
  -h, --help                display this help and exit
  -v, --version             output version information and exit

Examples:
  $PROGNAME --cli
  $PROGNAME -f jobs.csv -r
  $PROGNAME -d -f jobs.csv -l /tmp -i

Report $PROGNAME bugs to dev@sciemon.com
\c"
}

help_cli () {
 	echo -e "
This is the $PROGNAME command line interface program.

Available commands:

        load             load job file
        log              define log directory
        jobs             show job list file content
        run              run job
        status           show status information

        new              go to new job menu

        debug            enable/disable debug messages
        clear            clear screeen
        help             show help
        quit,bye,exit    exit the program
"
}

help_cli_newjob () {
 	echo -e "
Available commands:

        name             set job name
        host             set host name
        protocol         set protocol
        source           set source file or directory
        user             set user name
        pass             set user password
        dest             set destination directory
        compression      set compression algorithm
                         valid options: none, gzip, bzip2 (default)
        sudo             run job in sudo mode

        summary          show new job summary
        save             save job

        debug            enable/disable debug messages
        clear            clear screen
        help             show help
        up, back         go back to main menu
        quit,bye,exit    exit the program
"
}

version () {
	echo -e "$PROGNAME $PVERSION
Copyright (C) 2011 Sciemon Technologies.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Marcio Pessoa <marcio@pessoa.eti.br>.
\c"
}

bin_to_human () {
	case "$1" in
		0)
		echo "off"
		;;
		1)
		echo "on"
		;;
		*)
		return $FALSE
		;;
	esac
}

status () {
	DEBUG_STATUS=`bin_to_human $DEBUG`
	echo -e "
Jobs file: $FILE_JOBS
Log directory: $DIR_LOG
Debug messages: $DEBUG_STATUS
"
}

check_file () {
	if [ -f $1 ]
	then
		return $OK
	else
		return $CRITICAL
	fi
}

check_dir () {
	if [ -d $1 ]
	then
		return $OK
	else
		return $CRITICAL
	fi
}

message () {
	#
	# Usage: message <priority> <text_message>
	#
	
	case "$1" in
		debug)
		if [ $DEBUG -eq $TRUE ]
		then
			echo -e $2
		fi
		;;
		
		normal)
		echo -e $2
		;;

		*)
		echo -e $2
		;;

	esac
}

job_load_file () {
	export FILE_JOBS=$1
	check_file $FILE_JOBS

	if [ $? -eq $OK ]
	then
		#~ echo -e "Job file loaded.\n"
		message debug "Job file loaded: $FILE_JOBS\n"
	else
		message normal "Job file not found."
		message normal "Do you want to create a new job file (yes/no)? \c"
		while [ 1 ]
		do
			read USERINPUT
			INPUT=`echo $USERINPUT | tr -s " " | cut -f 1 -d " "`
			case $INPUT in
				yes)
					touch $FILE_JOBS 1>/dev/null 2>&1
					if [ $? -ne 0 ]
					then
						message normal "Error: Can't create file.\n"
						return $CRITICAL
					else
						echo -e "#
# $PROGNAME - $PVERSION - $DESCRIPT
#
# Description: Job file
#
#
# name, hostname, protocol, tcp_port, path_to_backup, sudo, user, password, compression, destination
#" > $FILE_JOBS
						message normal "Job file created: $FILE_JOBS.\n"
						return $OK
					fi
					;;
				no)
					return $OK
					;;
				*)
					message normal "Invalid input. Just type yes or no. \c"
					;;
			esac
		done
	fi
}

job_log () {
	export DIR_LOG=$1
	check_dir $DIR_LOG

	if [ $? -eq $OK ]
	then
		message debug "Log directory defined: $DIR_LOG"
	else
		DIR_LOG="."
		message normal "Log directory not found."
		message normal "Current log directory: $DIR_LOG"
	fi
}

job_save () {
	FILE_JOBS=$1

	echo -e "$JOB_NAME, $JOB_HOSTNAME, $JOB_PROTO, $JOB_PORT,$JOB_SOURCE, $JOB_SUDO, $JOB_USER, $JOB_PASS, $JOB_COMPRESSION, $JOB_OUTDIR" \
	>> $FILE_JOBS
	
	# Check status
	if [ $? -eq 0 ]
	then
		message debug "Job saved.\n"
	else
		message normal "Error writing file.\n"
	fi
}

job_show () {
	FILE_JOBS=$1
	check_file $FILE_JOBS
	
	# Job counter
	JOB_NUMBER=1

	message debug "Reading job file: $FILE_JOBS..."

	if [ $? -eq $OK ]
	then
		grep -v -e ^"#" $FILE_JOBS | tr -s "\n" | while read JOB_NAME JOB_HOSTNAME JOB_PROTO JOB_PORT JOB_SOURCE JOB_SUDO JOB_USER JOB_PASS JOB_COMPRESSION JOB_OUTDIR
		do 

		# Filter variables
		JOB_NAME=$( AUX=$JOB_NAME; echo $AUX | tr -d " " )
		JOB_HOSTNAME=$( AUX=$JOB_HOSTNAME; echo $AUX | tr -d " " )
		JOB_PROTO=$( AUX=$JOB_PROTO; echo $AUX | tr -d " " )
		JOB_PORT=$( AUX=$JOB_PORT; echo $AUX | tr -d " " )
		JOB_SOURCE=$( AUX=$JOB_SOURCE; echo $AUX )
		JOB_SUDO=$( AUX=$JOB_SUDO; echo $AUX | tr -d " " )
		JOB_USER=$( AUX=$JOB_USER; echo $AUX | tr -d " " )
		JOB_PASS=$( AUX=$JOB_PASS; echo $AUX | tr -d " " )
		JOB_COMPRESSION=$( AUX=$JOB_COMPRESSION; echo $AUX | tr -d " " )
		JOB_OUTDIR=$( AUX=$JOB_OUTDIR; echo $AUX | tr -d " " )

		job_summary #$JOB_NAME $JOB_HOSTNAME $JOB_PROTO $JOB_PORT $JOB_SOURCE $JOB_SUDO $JOB_USER $JOB_PASS $JOB_COMPRESSION $JOB_OUTDIR

		# Job counter
		let JOB_NUMBER=$JOB_NUMBER+1
		done
		echo
		
	else
		message normal "No job file loaded.\n"
	fi
}

job_summary () {
	#
	if [ $JOB_NUMBER -gt 0 ]
	then
		message normal "\n        Job number:\t$JOB_NUMBER"
	else
		message normal ""
	fi
	
	#
	if [ $JOB_SUDO == $TRUE ];
	then
		JOB_SUDO_STATUS="sudo enabled"
	else
		JOB_SUDO_STATUS="sudo disabled"
	fi
	
	message normal "        Job name:\t$JOB_NAME
        Host name:\t$JOB_HOSTNAME:$JOB_PORT ($JOB_PROTO) 
        Source:\t\t$JOB_SOURCE
        Destination:\t$JOB_OUTDIR"
	message debug "        User name:\t$JOB_USER ($JOB_SUDO_STATUS)
        Password:\t$JOB_PASS
        Compression:\t$JOB_COMPRESSION"
}

job_run () {
	# Define job to run
	if [ "$1" == "run" ]
	then
		JOB_NUMBER=0
	else
		JOB_NUMBER=$1
	fi
	
	#
	echo
	
	# Job counter
	JOB_COUNTER=0
	
	# Load jobs from file
	grep -v -e ^"#" $FILE_JOBS | tr -s "\n" | while read JOB_NAME JOB_HOSTNAME JOB_PROTO JOB_PORT JOB_SOURCE JOB_SUDO JOB_USER JOB_PASS JOB_COMPRESSION JOB_OUTDIR
	do 

	# Filter variables
	JOB_NAME=$( AUX=$JOB_NAME; echo $AUX | tr -d " " )
	JOB_HOSTNAME=$( AUX=$JOB_HOSTNAME; echo $AUX | tr -d " " )
	JOB_PROTO=$( AUX=$JOB_PROTO; echo $AUX | tr -d " " )
	JOB_PORT=$( AUX=$JOB_PORT; echo $AUX | tr -d " " )
	JOB_SOURCE=$( AUX=$JOB_SOURCE; echo $AUX )
	JOB_SUDO=$( AUX=$JOB_SUDO; echo $AUX | tr -d " " )
	JOB_USER=$( AUX=$JOB_USER; echo $AUX | tr -d " " )
	JOB_PASS=$( AUX=$JOB_PASS; echo $AUX | tr -d " " )
	JOB_COMPRESSION=$( AUX=$JOB_COMPRESSION; echo $AUX | tr -d " " )
	JOB_OUTDIR=$( AUX=$JOB_OUTDIR; echo $AUX | tr -d " " )
	
	# Increase job counter
	let JOB_COUNTER=$JOB_COUNTER+1
	
	# Skip jobs not specified
	if [ $JOB_NUMBER -ne $JOB_COUNTER -a $JOB_NUMBER -ne 0 ]
	then
		continue
	fi
	
	# Start message
	message normal "        Running job:\t$JOB_COUNTER"
	message debug "        Job name:\t$JOB_NAME
        Host name:\t$JOB_HOSTNAME ($JOB_PROTO) 
        Source:\t\t$JOB_SOURCE
        Destination:\t$JOB_OUTDIR
        Compression:\t$JOB_COMPRESSION"

	# Backup process
	job_archive $JOB_NAME $JOB_HOSTNAME $JOB_PROTO $JOB_PORT $JOB_SOURCE $JOB_SUDO $JOB_USER $JOB_PASS $JOB_COMPRESSION $JOB_OUTDIR
	
	#
	if [ $? -eq $OK ]
	then
		message debug "        File:\t\t$JOB_OUTDIR/$JOB_OUT_FILE"
		message debug "        Done."
		message normal ""
	else
		message normal "        Fail."
		message debug "        Check log file."
		message debug "        File:\t\t$DIR_LOG/$JOB_LOG_FILE"
		message normal ""
	fi

	done
}

job_archive () {
	# 
	#~ JOB_NAME=$1
	#~ JOB_HOSTNAME=$2
	#~ JOB_PROTO=$3
	#~ JOB_PORT=$4
	#~ JOB_SOURCE=$5
	#~ JOB_SUDO=$6
	#~ JOB_USER=$7
	#~ JOB_PASS=$8
	#~ JOB_COMPRESSION=$9
	#~ JOB_OUTDIR="$10"
	
	# Check sudo status
	if [ $JOB_SUDO -eq $TRUE ]
	then
		JOB_SUDO_STATUS="sudo"
	else
		JOB_SUDO_STATUS=""
	fi
	
	# Set tar command arguments
	TAR_ARGS="cf"
	
	# Set job compression algorithm
	case "$JOB_COMPRESSION" in
		
		none)
		TAR_ARGS=""$TAR_ARGS
		JOB_FILE_EXT=""
		;;
	
		gzip)
		TAR_ARGS="z"$TAR_ARGS
		JOB_FILE_EXT=".gz"
		;;
		
		bzip2)
		TAR_ARGS="j"$TAR_ARGS
		JOB_FILE_EXT=".bz2"
		;;
	
		*)
		TAR_ARGS="j"$TAR_ARGS
		JOB_FILE_EXT=".bz2"
		;;
			
	esac
	
	# 
	TIMESTAMP=$( date +%Y-%m-%d_%H-%M )
	JOB_OUT_FILE=$JOB_HOSTNAME-$JOB_NAME\_-_$TIMESTAMP.tar$JOB_FILE_EXT
	JOB_LOG_FILE=$JOB_HOSTNAME-$JOB_NAME\_-_$TIMESTAMP.log
	
	# Select protocol type
	case "$JOB_PROTO" in
	
		local)
			# 
			export IFS=" "
			# 
			$JOB_SUDO_STATUS tar $TAR_ARGS $JOB_OUTDIR/$JOB_OUT_FILE $JOB_SOURCE \
			    1>$DIR_LOG/$JOB_LOG_FILE 2>&1
			RETVAL=$?
			# 
			export IFS=","
			return $RETVAL
		;;
		
		ssh)
			# 
			export IFS=" "
			# Run compressor program
			ssh -n -p $JOB_PORT $JOB_USER@$JOB_HOSTNAME "$JOB_SUDO_STATUS tar $TAR_ARGS /tmp/$JOB_OUT_FILE $JOB_SOURCE 1>$DIR_LOG/$JOB_LOG_FILE 2>&1"
			RETVAL=$?
			# 
			export IFS=","
			# Verify compression tool command
			#~ if [ $RETVAL -ne 0 ]
			#~ then
				#~ return $CRITICAL
			#~ fi
			
			# Copy job logs
			scp -P $JOB_PORT $JOB_USER@$JOB_HOSTNAME:/tmp/$JOB_OUT_FILE $JOB_OUTDIR 1>$DIR_LOG/$JOB_LOG_FILE 2>&1
			
			# Copy tar (backup) file
			scp -P $JOB_PORT $JOB_USER@$JOB_HOSTNAME:/tmp/$JOB_LOG_FILE $DIR_LOG 1>/dev/null 2>&1
			
			return $RETVAL
		;;
		
		cifs)
			message normal "        Sorry... Protocol not deployed yet."
			#~ mount -r -t cifs $Device $ImptDir -o username=backup,password=aiWee6gu,codepage=850,iocharset=iso8859-1,umask=0
			return $WARNING
		;;
		
		*)
			message normal "        Error: Invalid protocol."
			return $CRITICAL
		;;
		
	esac
}

cli () {
	# CLI interpreter (Main menu)
	while [ 1 ]; do
		
		echo -e  "$PRPROMPT> \c"
		read USERINPUT
		
		INPUT1=`echo $USERINPUT | tr -s " " | cut -f 1 -d " "`
		INPUT2=`echo $USERINPUT | tr -s " " | cut -f 2- -d " "`
		
		case "$INPUT1" in
			
			status)
			status
			;;
			
			new)
			cli_newjob
			;;
			
			load)
			job_load_file $INPUT2
			;;
			
			log)
			job_log $INPUT2
			;;
			
			jobs)
			job_show $FILE_JOBS
			;;
			
			run)
				job_run $INPUT2
			;;
						
			"" | " ")
			;;
			
			help)
			help_cli
			;;
			
			version)
			version
			echo
			;;
			
			clear)
			clear
			;;
			
			reset)
			reset
			;;
			
			debug)
			if [ $DEBUG == $FALSE ];
			then
				message normal "Debug messages is enable.\n"
				DEBUG=$TRUE
			else
				message normal "Debug messages is disable.\n"
				DEBUG=$FALSE
			fi
			;;
			
			quit | exit | bye)
			message debug "Bye!\n"
			exit $OK
			;;
			
			*)
			message normal "Unknown command.\n"
			message debug "Type \"help\" to get some usage tips.\n"
			;;
			
		esac

done
}

cli_newjob () {
	# CLI interpreter (New job menu)

	# Job counter
	JOB_NUMBER=0

	while [ 1 ]; do
		
		echo -e  "$PRPROMPT/$JOB_NAME> \c"
		read USERINPUT
		
		INPUT1=`echo $USERINPUT | tr -s " " | cut -f 1 -d " "`
		INPUT2=`echo $USERINPUT | tr -s " " | cut -f 2- -d " "`
		
		case "$INPUT1" in
			
		  name)
			JOB_NAME=$INPUT2
			message debug "Job name is set to: $JOB_NAME.\n"
			;;
			
		  host)
			JOB_HOSTNAME=$INPUT2
			message debug "Host name is set to: $JOB_HOSTNAME.\n"
			;;
			
		  protocol)
			JOB_PROTO=$INPUT2
			message debug "Protocol is set to: $JOB_PROTO.\n"
			;;
			
		  port)
			JOB_PORT=$INPUT2
			message debug "TCP port is set to: $JOB_PORT.\n"
			;;

		  source)
			JOB_SOURCE=$INPUT2
			message debug "Source path is set to: $JOB_SOURCE.\n"
			;;
			
		  sudo)
			if [ $JOB_SUDO == $FALSE ];
			then
				message normal "Sudo mode is enable.\n"
				JOB_SUDO=$TRUE
			else
				message normal "Sudo mode is disable.\n"
				JOB_SUDO=$FALSE
			fi
			;;
			
		  user)
			JOB_USER=$INPUT2
			message debug "User name is set to: $JOB_USER.\n"
			;;
			
		  pass)
			JOB_PASS=$INPUT2
			message debug "User password is set to: $JOB_PASS.\n"
			;;
			
		  dest)
			JOB_OUTDIR=$INPUT2
			message debug "Destination directory is set to: $JOB_OUTDIR.\n"
			;;
			
		  compression)
			JOB_COMPRESSION=$INPUT2
			message debug "Compression algorithm is set to: $JOB_COMPRESSION.\n"
			;;
			
		  summary)
			job_summary
			echo
			;;
			
		  save)
			job_save $FILE_JOBS
			;;
			
		  up | back)
			PRPROMPT=$PROGNAME
			return $OK
			;;
			
			"" | " ")
			;;
			
		  help)
			help_cli_newjob
			;;
			
		  version)
			version
			echo
			;;
			
		  clear)
			clear
			;;
			
		  reset)
			reset
			;;
			
		  debug)
			if [ $DEBUG == $FALSE ];
			then
				message normal "Debug messages is enable.\n"
				DEBUG=$TRUE
			else
				message normal "Debug messages is disable.\n"
				DEBUG=$FALSE
			fi
			;;
			
		  quit | exit | bye)
			message debug "Bye!\n"
			exit $OK
			;;
			
		  *)
			message normal "Unknown command.\n"
			;;
			
		esac

	done
}


###############################################################################
#
# Input management
#
###############################################################################

#~ while test -n "$1"
while [ 1 ]
do
	
	case "$1" in
		
		--file | -f)
		shift
		job_load_file $1
		;;
		
		--log | -l)
		shift
		job_log $1
		;;
		
		--debug | -d)
		DEBUG=$TRUE
		;;
		
		--cli | -i)
		cli
		;;
		
		--run | -r)
		#~ shift
		job_run 0
		exit $?
		;;
		
		--help | -h)
		help
		version
		exit $OK
		;;
		
		--version | -v)
		version
		exit $OK
		;;
		
		*)
		help
		exit $UNKNOWN
		;;
		
	esac
	shift
	
done

exit $UNKNOWN
